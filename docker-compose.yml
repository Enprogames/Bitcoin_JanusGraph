version: '3.8'

services:

  app:
    container_name: app
    stdin_open: true
    tty: true   # Enabled together with stdin_open so it won't raise an error when we are in pdb mode.
    build:
      context: .
      dockerfile: Dockerfile
    # initialize database, then run dummy command to keep container running
    command: /bin/bash -c "python /app/init_db.py && tail -f /dev/null"
    volumes:
      - .:/app
    networks:
      - btc-network
    ports:
      - "5000:5000"
    depends_on:
      - btc_janus
      - btc_postgres

  btc_postgres:
    container_name: btc_postgres
    image: postgres
    shm_size: 1g
    restart: unless-stopped
    networks:
      - btc-network
    ports:
    - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - ${DATABASE_FOLDER:-./data/btc_postgres}:/var/lib/postgresql/data
    environment:
    - POSTGRES_DB=${DATABASE_NAME}
    - POSTGRES_USER=${DATABASE_USER}
    - POSTGRES_PASSWORD=${DATABASE_PASSWORD}

  btc_janus:
    build:
      context: ./janusgraph/
    container_name: btc_janus
    shm_size: 2g
    ports:
      - "${JANUSGRAPH_PORT:-8182}:${JANUSGRAPH_PORT:-8182}"
      - "8484:8184"
      - "8081:8081"
    networks:
      - btc-network
    volumes:
      - ${GRAPH_DB_FOLDER:-./data/btc_janus}:/var/lib/janusgraph
    healthcheck:
      test: ["CMD", "bin/gremlin.sh", "-e", "scripts/remote-connect.groovy"]
      interval: 10s
      timeout: 60s
      retries: 4
    environment:
      janusgraph.storage.backend: berkeleyje
      # janusgraph.storage.backend: cql
      # janusgraph.storage.hostname: btc_cass
      # JANUS_PROPS_TEMPLATE: cql
      janusgraph.tx.log-tx: true
      janusgraph.tx.max-commit-time: 100000000000
      # janusgraph.graph.set-vertex-id: true
      # janusgraph.graph.allow-custom-vid-types: true
      # janusgraph.index.default.backend: lucene

  # btc_cass:
  #   container_name: btc_cass
  #   image: cassandra:3.11
  #   healthcheck:
  #       test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
  #       interval: 5s
  #       timeout: 5s
  #       retries: 60
  #   ports:
  #     - "9042:9042"
  #     - "9160:9160"
  #   volumes:
  #     - ${CASSANDRA_DB_FOLDER:-./data/btc_cass}:/var/lib/cassandra
  #     - ./cassandra/cassandra.yaml:/etc/cassandra/cassandra.yaml
  #   networks:
  #     - btc-network
  #   environment:
  #     - CASSANDRA_START_RPC=true

  # btc_neo4j:
  #   container_name: btc_neo4j
  #   image: neo4j:latest
  #   restart: unless-stopped
  #   ports:
  #     - "7474:7474"
  #     - "7687:7687"
  #   volumes:
  #     - ${NEO4J_DB_FOLDER:-./neo4j_data}/main_db/data:/data
  #     - ${NEO4J_DB_FOLDER:-./neo4j_data}/main_db/logs:/logs
  #   networks:
  #     - btc-network
  #   environment:
  #     # Raise memory limits
  #     # - NEO4J_dbms_memory_pagecache_size=1G
  #     # - NEO4J_dbms.memory.heap.initial_size=1G
  #     # - NEO4J_dbms_memory_heap_max__size=1G

  #     - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}

  #     - NEO4J_dbms_connector_bolt_listen__address=:7687
  #     - NEO4J_dbms_connector_bolt_advertised__address=:7687

  #     - NEO4J_dbms_connector_http_listen__address=:7474
  #     - NEO4J_dbms_connector_http_advertised__address=:7474

networks:
  btc-network:

# JanusGraph Failure Recovery:
# JanusGraphFactory.startTransactionRecovery(graph, java.time.Instant.now().minusSeconds(24 * 60 * 60));
