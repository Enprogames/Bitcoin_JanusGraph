version: '3.8'

services:

  app:
    container_name: app
    stdin_open: true
    tty: true   # Enabled together with stdin_open so it won't raise an error when we are in pdb mode.
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    networks:
      - btc-network
    ports:
      - "5000:5000"
    depends_on:
      - btc_janusgraph
      - btc_postgres_db

  btc_postgres_db:
    container_name: btc_postgres_db
    image: postgres
    restart: unless-stopped
    networks:
      - btc-network
    ports:
    - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
    - POSTGRES_DB=${DATABASE_NAME}
    - POSTGRES_USER=${DATABASE_USER}
    - POSTGRES_PASSWORD=${DATABASE_PASSWORD}

  btc_janusgraph:
    # build: ./janusgraph
    image: janusgraph/janusgraph:latest
    container_name: btc_janusgraph
    environment:
      # janusgraph.graph.set-vertex-id: true
      # janusgraph.graph.allow-custom-vid-types: true
      janusgraph.storage.backend: berkeleyje
      # janusgraph.storage.backend: cassandra
      # janusgraph.index.default.backend: lucene
    ports:
      - "${JANUSGRAPH_PORT:-8182}:${JANUSGRAPH_PORT:-8182}"
      - "8484:8184"
    networks:
      - btc-network
    volumes:
      - btc_janusgraph_data:/var/lib/janusgraph
      # - "./janusgraph/janusgraph.properties:/etc/opt/janusgraph/janusgraph.properties:ro"
    healthcheck:
      test: ["CMD", "bin/gremlin.sh", "-e", "scripts/remote-connect.groovy"]
      interval: 10s
      timeout: 60s
      retries: 4


networks:
  btc-network:
volumes:
  btc_janusgraph_data:

# start from fresh state:
# docker-compose down && docker volume rm bitcoin_janusgraph_btc_janusgraph_data && docker-compose up --build -d btc_janusgraph jce-cassandra jce-elasticsearch --remove-orphans

# gremlin console connect to graph:
# graph = JanusGraphFactory.open('conf/janusgraph-berkeleyje-lucene-server.properties')
# or
# graph = JanusGraphFactory.open('conf/janusgraph-berkeleyje-server.properties')
# mgmt = graph.openManagement()
